import 'package:hetu_script/hetu_script.dart';
import 'package:flutter/services.dart';
import 'package:flutter/foundation.dart';


class LogicalKeyboardKeyAutoBinding extends HTExternalClass {
  LogicalKeyboardKeyAutoBinding() : super('LogicalKeyboardKey');

  @override
  dynamic memberGet(String varName, {String from = HTLexicon.global}) {
    switch (varName) {
      case 'LogicalKeyboardKey':
        return ({positionalArgs, namedArgs, typeArgs}) => LogicalKeyboardKey(positionalArgs[0], debugName : namedArgs.containsKey('debugName') ? namedArgs['debugName'] : null, keyLabel : namedArgs.containsKey('keyLabel') ? namedArgs['keyLabel'] : '');
      case 'LogicalKeyboardKey.findKeyByKeyId':
        return ({positionalArgs, namedArgs, typeArgs}) => LogicalKeyboardKey.findKeyByKeyId(positionalArgs[0]);
      case 'LogicalKeyboardKey.isControlCharacter':
        return ({positionalArgs, namedArgs, typeArgs}) => LogicalKeyboardKey.isControlCharacter(positionalArgs[0]);
      case 'LogicalKeyboardKey.collapseSynonyms':
        return ({positionalArgs, namedArgs, typeArgs}) => LogicalKeyboardKey.collapseSynonyms(positionalArgs[0]);
      case 'LogicalKeyboardKey.valueMask':
        return LogicalKeyboardKey.valueMask;
      case 'LogicalKeyboardKey.platformMask':
        return LogicalKeyboardKey.platformMask;
      case 'LogicalKeyboardKey.autogeneratedMask':
        return LogicalKeyboardKey.autogeneratedMask;
      case 'LogicalKeyboardKey.synonymMask':
        return LogicalKeyboardKey.synonymMask;
      case 'LogicalKeyboardKey.unicodePlane':
        return LogicalKeyboardKey.unicodePlane;
      case 'LogicalKeyboardKey.hidPlane':
        return LogicalKeyboardKey.hidPlane;
      case 'LogicalKeyboardKey.none':
        return LogicalKeyboardKey.none;
      case 'LogicalKeyboardKey.hyper':
        return LogicalKeyboardKey.hyper;
      case 'LogicalKeyboardKey.superKey':
        return LogicalKeyboardKey.superKey;
      case 'LogicalKeyboardKey.fnLock':
        return LogicalKeyboardKey.fnLock;
      case 'LogicalKeyboardKey.suspend':
        return LogicalKeyboardKey.suspend;
      case 'LogicalKeyboardKey.resume':
        return LogicalKeyboardKey.resume;
      case 'LogicalKeyboardKey.turbo':
        return LogicalKeyboardKey.turbo;
      case 'LogicalKeyboardKey.privacyScreenToggle':
        return LogicalKeyboardKey.privacyScreenToggle;
      case 'LogicalKeyboardKey.sleep':
        return LogicalKeyboardKey.sleep;
      case 'LogicalKeyboardKey.wakeUp':
        return LogicalKeyboardKey.wakeUp;
      case 'LogicalKeyboardKey.displayToggleIntExt':
        return LogicalKeyboardKey.displayToggleIntExt;
      case 'LogicalKeyboardKey.usbReserved':
        return LogicalKeyboardKey.usbReserved;
      case 'LogicalKeyboardKey.usbErrorRollOver':
        return LogicalKeyboardKey.usbErrorRollOver;
      case 'LogicalKeyboardKey.usbPostFail':
        return LogicalKeyboardKey.usbPostFail;
      case 'LogicalKeyboardKey.usbErrorUndefined':
        return LogicalKeyboardKey.usbErrorUndefined;
      case 'LogicalKeyboardKey.keyA':
        return LogicalKeyboardKey.keyA;
      case 'LogicalKeyboardKey.keyB':
        return LogicalKeyboardKey.keyB;
      case 'LogicalKeyboardKey.keyC':
        return LogicalKeyboardKey.keyC;
      case 'LogicalKeyboardKey.keyD':
        return LogicalKeyboardKey.keyD;
      case 'LogicalKeyboardKey.keyE':
        return LogicalKeyboardKey.keyE;
      case 'LogicalKeyboardKey.keyF':
        return LogicalKeyboardKey.keyF;
      case 'LogicalKeyboardKey.keyG':
        return LogicalKeyboardKey.keyG;
      case 'LogicalKeyboardKey.keyH':
        return LogicalKeyboardKey.keyH;
      case 'LogicalKeyboardKey.keyI':
        return LogicalKeyboardKey.keyI;
      case 'LogicalKeyboardKey.keyJ':
        return LogicalKeyboardKey.keyJ;
      case 'LogicalKeyboardKey.keyK':
        return LogicalKeyboardKey.keyK;
      case 'LogicalKeyboardKey.keyL':
        return LogicalKeyboardKey.keyL;
      case 'LogicalKeyboardKey.keyM':
        return LogicalKeyboardKey.keyM;
      case 'LogicalKeyboardKey.keyN':
        return LogicalKeyboardKey.keyN;
      case 'LogicalKeyboardKey.keyO':
        return LogicalKeyboardKey.keyO;
      case 'LogicalKeyboardKey.keyP':
        return LogicalKeyboardKey.keyP;
      case 'LogicalKeyboardKey.keyQ':
        return LogicalKeyboardKey.keyQ;
      case 'LogicalKeyboardKey.keyR':
        return LogicalKeyboardKey.keyR;
      case 'LogicalKeyboardKey.keyS':
        return LogicalKeyboardKey.keyS;
      case 'LogicalKeyboardKey.keyT':
        return LogicalKeyboardKey.keyT;
      case 'LogicalKeyboardKey.keyU':
        return LogicalKeyboardKey.keyU;
      case 'LogicalKeyboardKey.keyV':
        return LogicalKeyboardKey.keyV;
      case 'LogicalKeyboardKey.keyW':
        return LogicalKeyboardKey.keyW;
      case 'LogicalKeyboardKey.keyX':
        return LogicalKeyboardKey.keyX;
      case 'LogicalKeyboardKey.keyY':
        return LogicalKeyboardKey.keyY;
      case 'LogicalKeyboardKey.keyZ':
        return LogicalKeyboardKey.keyZ;
      case 'LogicalKeyboardKey.digit1':
        return LogicalKeyboardKey.digit1;
      case 'LogicalKeyboardKey.digit2':
        return LogicalKeyboardKey.digit2;
      case 'LogicalKeyboardKey.digit3':
        return LogicalKeyboardKey.digit3;
      case 'LogicalKeyboardKey.digit4':
        return LogicalKeyboardKey.digit4;
      case 'LogicalKeyboardKey.digit5':
        return LogicalKeyboardKey.digit5;
      case 'LogicalKeyboardKey.digit6':
        return LogicalKeyboardKey.digit6;
      case 'LogicalKeyboardKey.digit7':
        return LogicalKeyboardKey.digit7;
      case 'LogicalKeyboardKey.digit8':
        return LogicalKeyboardKey.digit8;
      case 'LogicalKeyboardKey.digit9':
        return LogicalKeyboardKey.digit9;
      case 'LogicalKeyboardKey.digit0':
        return LogicalKeyboardKey.digit0;
      case 'LogicalKeyboardKey.enter':
        return LogicalKeyboardKey.enter;
      case 'LogicalKeyboardKey.escape':
        return LogicalKeyboardKey.escape;
      case 'LogicalKeyboardKey.backspace':
        return LogicalKeyboardKey.backspace;
      case 'LogicalKeyboardKey.tab':
        return LogicalKeyboardKey.tab;
      case 'LogicalKeyboardKey.space':
        return LogicalKeyboardKey.space;
      case 'LogicalKeyboardKey.minus':
        return LogicalKeyboardKey.minus;
      case 'LogicalKeyboardKey.equal':
        return LogicalKeyboardKey.equal;
      case 'LogicalKeyboardKey.bracketLeft':
        return LogicalKeyboardKey.bracketLeft;
      case 'LogicalKeyboardKey.bracketRight':
        return LogicalKeyboardKey.bracketRight;
      case 'LogicalKeyboardKey.backslash':
        return LogicalKeyboardKey.backslash;
      case 'LogicalKeyboardKey.semicolon':
        return LogicalKeyboardKey.semicolon;
      case 'LogicalKeyboardKey.quote':
        return LogicalKeyboardKey.quote;
      case 'LogicalKeyboardKey.backquote':
        return LogicalKeyboardKey.backquote;
      case 'LogicalKeyboardKey.comma':
        return LogicalKeyboardKey.comma;
      case 'LogicalKeyboardKey.period':
        return LogicalKeyboardKey.period;
      case 'LogicalKeyboardKey.slash':
        return LogicalKeyboardKey.slash;
      case 'LogicalKeyboardKey.capsLock':
        return LogicalKeyboardKey.capsLock;
      case 'LogicalKeyboardKey.f1':
        return LogicalKeyboardKey.f1;
      case 'LogicalKeyboardKey.f2':
        return LogicalKeyboardKey.f2;
      case 'LogicalKeyboardKey.f3':
        return LogicalKeyboardKey.f3;
      case 'LogicalKeyboardKey.f4':
        return LogicalKeyboardKey.f4;
      case 'LogicalKeyboardKey.f5':
        return LogicalKeyboardKey.f5;
      case 'LogicalKeyboardKey.f6':
        return LogicalKeyboardKey.f6;
      case 'LogicalKeyboardKey.f7':
        return LogicalKeyboardKey.f7;
      case 'LogicalKeyboardKey.f8':
        return LogicalKeyboardKey.f8;
      case 'LogicalKeyboardKey.f9':
        return LogicalKeyboardKey.f9;
      case 'LogicalKeyboardKey.f10':
        return LogicalKeyboardKey.f10;
      case 'LogicalKeyboardKey.f11':
        return LogicalKeyboardKey.f11;
      case 'LogicalKeyboardKey.f12':
        return LogicalKeyboardKey.f12;
      case 'LogicalKeyboardKey.printScreen':
        return LogicalKeyboardKey.printScreen;
      case 'LogicalKeyboardKey.scrollLock':
        return LogicalKeyboardKey.scrollLock;
      case 'LogicalKeyboardKey.pause':
        return LogicalKeyboardKey.pause;
      case 'LogicalKeyboardKey.insert':
        return LogicalKeyboardKey.insert;
      case 'LogicalKeyboardKey.home':
        return LogicalKeyboardKey.home;
      case 'LogicalKeyboardKey.pageUp':
        return LogicalKeyboardKey.pageUp;
      case 'LogicalKeyboardKey.delete':
        return LogicalKeyboardKey.delete;
      case 'LogicalKeyboardKey.end':
        return LogicalKeyboardKey.end;
      case 'LogicalKeyboardKey.pageDown':
        return LogicalKeyboardKey.pageDown;
      case 'LogicalKeyboardKey.arrowRight':
        return LogicalKeyboardKey.arrowRight;
      case 'LogicalKeyboardKey.arrowLeft':
        return LogicalKeyboardKey.arrowLeft;
      case 'LogicalKeyboardKey.arrowDown':
        return LogicalKeyboardKey.arrowDown;
      case 'LogicalKeyboardKey.arrowUp':
        return LogicalKeyboardKey.arrowUp;
      case 'LogicalKeyboardKey.numLock':
        return LogicalKeyboardKey.numLock;
      case 'LogicalKeyboardKey.numpadDivide':
        return LogicalKeyboardKey.numpadDivide;
      case 'LogicalKeyboardKey.numpadMultiply':
        return LogicalKeyboardKey.numpadMultiply;
      case 'LogicalKeyboardKey.numpadSubtract':
        return LogicalKeyboardKey.numpadSubtract;
      case 'LogicalKeyboardKey.numpadAdd':
        return LogicalKeyboardKey.numpadAdd;
      case 'LogicalKeyboardKey.numpadEnter':
        return LogicalKeyboardKey.numpadEnter;
      case 'LogicalKeyboardKey.numpad1':
        return LogicalKeyboardKey.numpad1;
      case 'LogicalKeyboardKey.numpad2':
        return LogicalKeyboardKey.numpad2;
      case 'LogicalKeyboardKey.numpad3':
        return LogicalKeyboardKey.numpad3;
      case 'LogicalKeyboardKey.numpad4':
        return LogicalKeyboardKey.numpad4;
      case 'LogicalKeyboardKey.numpad5':
        return LogicalKeyboardKey.numpad5;
      case 'LogicalKeyboardKey.numpad6':
        return LogicalKeyboardKey.numpad6;
      case 'LogicalKeyboardKey.numpad7':
        return LogicalKeyboardKey.numpad7;
      case 'LogicalKeyboardKey.numpad8':
        return LogicalKeyboardKey.numpad8;
      case 'LogicalKeyboardKey.numpad9':
        return LogicalKeyboardKey.numpad9;
      case 'LogicalKeyboardKey.numpad0':
        return LogicalKeyboardKey.numpad0;
      case 'LogicalKeyboardKey.numpadDecimal':
        return LogicalKeyboardKey.numpadDecimal;
      case 'LogicalKeyboardKey.intlBackslash':
        return LogicalKeyboardKey.intlBackslash;
      case 'LogicalKeyboardKey.contextMenu':
        return LogicalKeyboardKey.contextMenu;
      case 'LogicalKeyboardKey.power':
        return LogicalKeyboardKey.power;
      case 'LogicalKeyboardKey.numpadEqual':
        return LogicalKeyboardKey.numpadEqual;
      case 'LogicalKeyboardKey.f13':
        return LogicalKeyboardKey.f13;
      case 'LogicalKeyboardKey.f14':
        return LogicalKeyboardKey.f14;
      case 'LogicalKeyboardKey.f15':
        return LogicalKeyboardKey.f15;
      case 'LogicalKeyboardKey.f16':
        return LogicalKeyboardKey.f16;
      case 'LogicalKeyboardKey.f17':
        return LogicalKeyboardKey.f17;
      case 'LogicalKeyboardKey.f18':
        return LogicalKeyboardKey.f18;
      case 'LogicalKeyboardKey.f19':
        return LogicalKeyboardKey.f19;
      case 'LogicalKeyboardKey.f20':
        return LogicalKeyboardKey.f20;
      case 'LogicalKeyboardKey.f21':
        return LogicalKeyboardKey.f21;
      case 'LogicalKeyboardKey.f22':
        return LogicalKeyboardKey.f22;
      case 'LogicalKeyboardKey.f23':
        return LogicalKeyboardKey.f23;
      case 'LogicalKeyboardKey.f24':
        return LogicalKeyboardKey.f24;
      case 'LogicalKeyboardKey.open':
        return LogicalKeyboardKey.open;
      case 'LogicalKeyboardKey.help':
        return LogicalKeyboardKey.help;
      case 'LogicalKeyboardKey.select':
        return LogicalKeyboardKey.select;
      case 'LogicalKeyboardKey.again':
        return LogicalKeyboardKey.again;
      case 'LogicalKeyboardKey.undo':
        return LogicalKeyboardKey.undo;
      case 'LogicalKeyboardKey.cut':
        return LogicalKeyboardKey.cut;
      case 'LogicalKeyboardKey.copy':
        return LogicalKeyboardKey.copy;
      case 'LogicalKeyboardKey.paste':
        return LogicalKeyboardKey.paste;
      case 'LogicalKeyboardKey.find':
        return LogicalKeyboardKey.find;
      case 'LogicalKeyboardKey.audioVolumeMute':
        return LogicalKeyboardKey.audioVolumeMute;
      case 'LogicalKeyboardKey.audioVolumeUp':
        return LogicalKeyboardKey.audioVolumeUp;
      case 'LogicalKeyboardKey.audioVolumeDown':
        return LogicalKeyboardKey.audioVolumeDown;
      case 'LogicalKeyboardKey.numpadComma':
        return LogicalKeyboardKey.numpadComma;
      case 'LogicalKeyboardKey.intlRo':
        return LogicalKeyboardKey.intlRo;
      case 'LogicalKeyboardKey.kanaMode':
        return LogicalKeyboardKey.kanaMode;
      case 'LogicalKeyboardKey.intlYen':
        return LogicalKeyboardKey.intlYen;
      case 'LogicalKeyboardKey.convert':
        return LogicalKeyboardKey.convert;
      case 'LogicalKeyboardKey.nonConvert':
        return LogicalKeyboardKey.nonConvert;
      case 'LogicalKeyboardKey.lang1':
        return LogicalKeyboardKey.lang1;
      case 'LogicalKeyboardKey.lang2':
        return LogicalKeyboardKey.lang2;
      case 'LogicalKeyboardKey.lang3':
        return LogicalKeyboardKey.lang3;
      case 'LogicalKeyboardKey.lang4':
        return LogicalKeyboardKey.lang4;
      case 'LogicalKeyboardKey.lang5':
        return LogicalKeyboardKey.lang5;
      case 'LogicalKeyboardKey.abort':
        return LogicalKeyboardKey.abort;
      case 'LogicalKeyboardKey.props':
        return LogicalKeyboardKey.props;
      case 'LogicalKeyboardKey.numpadParenLeft':
        return LogicalKeyboardKey.numpadParenLeft;
      case 'LogicalKeyboardKey.numpadParenRight':
        return LogicalKeyboardKey.numpadParenRight;
      case 'LogicalKeyboardKey.numpadBackspace':
        return LogicalKeyboardKey.numpadBackspace;
      case 'LogicalKeyboardKey.numpadMemoryStore':
        return LogicalKeyboardKey.numpadMemoryStore;
      case 'LogicalKeyboardKey.numpadMemoryRecall':
        return LogicalKeyboardKey.numpadMemoryRecall;
      case 'LogicalKeyboardKey.numpadMemoryClear':
        return LogicalKeyboardKey.numpadMemoryClear;
      case 'LogicalKeyboardKey.numpadMemoryAdd':
        return LogicalKeyboardKey.numpadMemoryAdd;
      case 'LogicalKeyboardKey.numpadMemorySubtract':
        return LogicalKeyboardKey.numpadMemorySubtract;
      case 'LogicalKeyboardKey.numpadSignChange':
        return LogicalKeyboardKey.numpadSignChange;
      case 'LogicalKeyboardKey.numpadClear':
        return LogicalKeyboardKey.numpadClear;
      case 'LogicalKeyboardKey.numpadClearEntry':
        return LogicalKeyboardKey.numpadClearEntry;
      case 'LogicalKeyboardKey.controlLeft':
        return LogicalKeyboardKey.controlLeft;
      case 'LogicalKeyboardKey.shiftLeft':
        return LogicalKeyboardKey.shiftLeft;
      case 'LogicalKeyboardKey.altLeft':
        return LogicalKeyboardKey.altLeft;
      case 'LogicalKeyboardKey.metaLeft':
        return LogicalKeyboardKey.metaLeft;
      case 'LogicalKeyboardKey.controlRight':
        return LogicalKeyboardKey.controlRight;
      case 'LogicalKeyboardKey.shiftRight':
        return LogicalKeyboardKey.shiftRight;
      case 'LogicalKeyboardKey.altRight':
        return LogicalKeyboardKey.altRight;
      case 'LogicalKeyboardKey.metaRight':
        return LogicalKeyboardKey.metaRight;
      case 'LogicalKeyboardKey.info':
        return LogicalKeyboardKey.info;
      case 'LogicalKeyboardKey.closedCaptionToggle':
        return LogicalKeyboardKey.closedCaptionToggle;
      case 'LogicalKeyboardKey.brightnessUp':
        return LogicalKeyboardKey.brightnessUp;
      case 'LogicalKeyboardKey.brightnessDown':
        return LogicalKeyboardKey.brightnessDown;
      case 'LogicalKeyboardKey.brightnessToggle':
        return LogicalKeyboardKey.brightnessToggle;
      case 'LogicalKeyboardKey.brightnessMinimum':
        return LogicalKeyboardKey.brightnessMinimum;
      case 'LogicalKeyboardKey.brightnessMaximum':
        return LogicalKeyboardKey.brightnessMaximum;
      case 'LogicalKeyboardKey.brightnessAuto':
        return LogicalKeyboardKey.brightnessAuto;
      case 'LogicalKeyboardKey.kbdIllumUp':
        return LogicalKeyboardKey.kbdIllumUp;
      case 'LogicalKeyboardKey.kbdIllumDown':
        return LogicalKeyboardKey.kbdIllumDown;
      case 'LogicalKeyboardKey.mediaLast':
        return LogicalKeyboardKey.mediaLast;
      case 'LogicalKeyboardKey.launchPhone':
        return LogicalKeyboardKey.launchPhone;
      case 'LogicalKeyboardKey.programGuide':
        return LogicalKeyboardKey.programGuide;
      case 'LogicalKeyboardKey.exit':
        return LogicalKeyboardKey.exit;
      case 'LogicalKeyboardKey.channelUp':
        return LogicalKeyboardKey.channelUp;
      case 'LogicalKeyboardKey.channelDown':
        return LogicalKeyboardKey.channelDown;
      case 'LogicalKeyboardKey.mediaPlay':
        return LogicalKeyboardKey.mediaPlay;
      case 'LogicalKeyboardKey.mediaPause':
        return LogicalKeyboardKey.mediaPause;
      case 'LogicalKeyboardKey.mediaRecord':
        return LogicalKeyboardKey.mediaRecord;
      case 'LogicalKeyboardKey.mediaFastForward':
        return LogicalKeyboardKey.mediaFastForward;
      case 'LogicalKeyboardKey.mediaRewind':
        return LogicalKeyboardKey.mediaRewind;
      case 'LogicalKeyboardKey.mediaTrackNext':
        return LogicalKeyboardKey.mediaTrackNext;
      case 'LogicalKeyboardKey.mediaTrackPrevious':
        return LogicalKeyboardKey.mediaTrackPrevious;
      case 'LogicalKeyboardKey.mediaStop':
        return LogicalKeyboardKey.mediaStop;
      case 'LogicalKeyboardKey.eject':
        return LogicalKeyboardKey.eject;
      case 'LogicalKeyboardKey.mediaPlayPause':
        return LogicalKeyboardKey.mediaPlayPause;
      case 'LogicalKeyboardKey.speechInputToggle':
        return LogicalKeyboardKey.speechInputToggle;
      case 'LogicalKeyboardKey.bassBoost':
        return LogicalKeyboardKey.bassBoost;
      case 'LogicalKeyboardKey.mediaSelect':
        return LogicalKeyboardKey.mediaSelect;
      case 'LogicalKeyboardKey.launchWordProcessor':
        return LogicalKeyboardKey.launchWordProcessor;
      case 'LogicalKeyboardKey.launchSpreadsheet':
        return LogicalKeyboardKey.launchSpreadsheet;
      case 'LogicalKeyboardKey.launchMail':
        return LogicalKeyboardKey.launchMail;
      case 'LogicalKeyboardKey.launchContacts':
        return LogicalKeyboardKey.launchContacts;
      case 'LogicalKeyboardKey.launchCalendar':
        return LogicalKeyboardKey.launchCalendar;
      case 'LogicalKeyboardKey.launchApp2':
        return LogicalKeyboardKey.launchApp2;
      case 'LogicalKeyboardKey.launchApp1':
        return LogicalKeyboardKey.launchApp1;
      case 'LogicalKeyboardKey.launchInternetBrowser':
        return LogicalKeyboardKey.launchInternetBrowser;
      case 'LogicalKeyboardKey.logOff':
        return LogicalKeyboardKey.logOff;
      case 'LogicalKeyboardKey.lockScreen':
        return LogicalKeyboardKey.lockScreen;
      case 'LogicalKeyboardKey.launchControlPanel':
        return LogicalKeyboardKey.launchControlPanel;
      case 'LogicalKeyboardKey.selectTask':
        return LogicalKeyboardKey.selectTask;
      case 'LogicalKeyboardKey.launchDocuments':
        return LogicalKeyboardKey.launchDocuments;
      case 'LogicalKeyboardKey.spellCheck':
        return LogicalKeyboardKey.spellCheck;
      case 'LogicalKeyboardKey.launchKeyboardLayout':
        return LogicalKeyboardKey.launchKeyboardLayout;
      case 'LogicalKeyboardKey.launchScreenSaver':
        return LogicalKeyboardKey.launchScreenSaver;
      case 'LogicalKeyboardKey.launchAssistant':
        return LogicalKeyboardKey.launchAssistant;
      case 'LogicalKeyboardKey.launchAudioBrowser':
        return LogicalKeyboardKey.launchAudioBrowser;
      case 'LogicalKeyboardKey.newKey':
        return LogicalKeyboardKey.newKey;
      case 'LogicalKeyboardKey.close':
        return LogicalKeyboardKey.close;
      case 'LogicalKeyboardKey.save':
        return LogicalKeyboardKey.save;
      case 'LogicalKeyboardKey.print':
        return LogicalKeyboardKey.print;
      case 'LogicalKeyboardKey.browserSearch':
        return LogicalKeyboardKey.browserSearch;
      case 'LogicalKeyboardKey.browserHome':
        return LogicalKeyboardKey.browserHome;
      case 'LogicalKeyboardKey.browserBack':
        return LogicalKeyboardKey.browserBack;
      case 'LogicalKeyboardKey.browserForward':
        return LogicalKeyboardKey.browserForward;
      case 'LogicalKeyboardKey.browserStop':
        return LogicalKeyboardKey.browserStop;
      case 'LogicalKeyboardKey.browserRefresh':
        return LogicalKeyboardKey.browserRefresh;
      case 'LogicalKeyboardKey.browserFavorites':
        return LogicalKeyboardKey.browserFavorites;
      case 'LogicalKeyboardKey.zoomIn':
        return LogicalKeyboardKey.zoomIn;
      case 'LogicalKeyboardKey.zoomOut':
        return LogicalKeyboardKey.zoomOut;
      case 'LogicalKeyboardKey.zoomToggle':
        return LogicalKeyboardKey.zoomToggle;
      case 'LogicalKeyboardKey.redo':
        return LogicalKeyboardKey.redo;
      case 'LogicalKeyboardKey.mailReply':
        return LogicalKeyboardKey.mailReply;
      case 'LogicalKeyboardKey.mailForward':
        return LogicalKeyboardKey.mailForward;
      case 'LogicalKeyboardKey.mailSend':
        return LogicalKeyboardKey.mailSend;
      case 'LogicalKeyboardKey.keyboardLayoutSelect':
        return LogicalKeyboardKey.keyboardLayoutSelect;
      case 'LogicalKeyboardKey.showAllWindows':
        return LogicalKeyboardKey.showAllWindows;
      case 'LogicalKeyboardKey.gameButton1':
        return LogicalKeyboardKey.gameButton1;
      case 'LogicalKeyboardKey.gameButton2':
        return LogicalKeyboardKey.gameButton2;
      case 'LogicalKeyboardKey.gameButton3':
        return LogicalKeyboardKey.gameButton3;
      case 'LogicalKeyboardKey.gameButton4':
        return LogicalKeyboardKey.gameButton4;
      case 'LogicalKeyboardKey.gameButton5':
        return LogicalKeyboardKey.gameButton5;
      case 'LogicalKeyboardKey.gameButton6':
        return LogicalKeyboardKey.gameButton6;
      case 'LogicalKeyboardKey.gameButton7':
        return LogicalKeyboardKey.gameButton7;
      case 'LogicalKeyboardKey.gameButton8':
        return LogicalKeyboardKey.gameButton8;
      case 'LogicalKeyboardKey.gameButton9':
        return LogicalKeyboardKey.gameButton9;
      case 'LogicalKeyboardKey.gameButton10':
        return LogicalKeyboardKey.gameButton10;
      case 'LogicalKeyboardKey.gameButton11':
        return LogicalKeyboardKey.gameButton11;
      case 'LogicalKeyboardKey.gameButton12':
        return LogicalKeyboardKey.gameButton12;
      case 'LogicalKeyboardKey.gameButton13':
        return LogicalKeyboardKey.gameButton13;
      case 'LogicalKeyboardKey.gameButton14':
        return LogicalKeyboardKey.gameButton14;
      case 'LogicalKeyboardKey.gameButton15':
        return LogicalKeyboardKey.gameButton15;
      case 'LogicalKeyboardKey.gameButton16':
        return LogicalKeyboardKey.gameButton16;
      case 'LogicalKeyboardKey.gameButtonA':
        return LogicalKeyboardKey.gameButtonA;
      case 'LogicalKeyboardKey.gameButtonB':
        return LogicalKeyboardKey.gameButtonB;
      case 'LogicalKeyboardKey.gameButtonC':
        return LogicalKeyboardKey.gameButtonC;
      case 'LogicalKeyboardKey.gameButtonLeft1':
        return LogicalKeyboardKey.gameButtonLeft1;
      case 'LogicalKeyboardKey.gameButtonLeft2':
        return LogicalKeyboardKey.gameButtonLeft2;
      case 'LogicalKeyboardKey.gameButtonMode':
        return LogicalKeyboardKey.gameButtonMode;
      case 'LogicalKeyboardKey.gameButtonRight1':
        return LogicalKeyboardKey.gameButtonRight1;
      case 'LogicalKeyboardKey.gameButtonRight2':
        return LogicalKeyboardKey.gameButtonRight2;
      case 'LogicalKeyboardKey.gameButtonSelect':
        return LogicalKeyboardKey.gameButtonSelect;
      case 'LogicalKeyboardKey.gameButtonStart':
        return LogicalKeyboardKey.gameButtonStart;
      case 'LogicalKeyboardKey.gameButtonThumbLeft':
        return LogicalKeyboardKey.gameButtonThumbLeft;
      case 'LogicalKeyboardKey.gameButtonThumbRight':
        return LogicalKeyboardKey.gameButtonThumbRight;
      case 'LogicalKeyboardKey.gameButtonX':
        return LogicalKeyboardKey.gameButtonX;
      case 'LogicalKeyboardKey.gameButtonY':
        return LogicalKeyboardKey.gameButtonY;
      case 'LogicalKeyboardKey.gameButtonZ':
        return LogicalKeyboardKey.gameButtonZ;
      case 'LogicalKeyboardKey.fn':
        return LogicalKeyboardKey.fn;
      case 'LogicalKeyboardKey.shift':
        return LogicalKeyboardKey.shift;
      case 'LogicalKeyboardKey.meta':
        return LogicalKeyboardKey.meta;
      case 'LogicalKeyboardKey.alt':
        return LogicalKeyboardKey.alt;
      case 'LogicalKeyboardKey.control':
        return LogicalKeyboardKey.control;
      default:
        throw HTErrorUndefined(varName);
    }
  }

  @override
  dynamic instanceMemberGet(dynamic instance, String id) {
    return (instance as LogicalKeyboardKey).htFetch(id);
  }



}

extension LogicalKeyboardKeyBinding on LogicalKeyboardKey {
  dynamic htFetch(String varName) {
    switch (varName) {
      case 'typeid':
        return HTTypeId('LogicalKeyboardKey');
      case 'keyId':
        return keyId;
      case 'debugName':
        return debugName;
      case 'keyLabel':
        return keyLabel;
      case 'hashCode':
        return hashCode;
      case 'isAutogenerated':
        return isAutogenerated;
      case 'synonyms':
        return synonyms;
      case 'debugFillProperties':
        return ({positionalArgs, namedArgs, typeArgs}) => this.debugFillProperties(positionalArgs[0]);
      default:
        throw HTErrorUndefined(varName);
    }
  }

}

class PhysicalKeyboardKeyAutoBinding extends HTExternalClass {
  PhysicalKeyboardKeyAutoBinding() : super('PhysicalKeyboardKey');

  @override
  dynamic memberGet(String varName, {String from = HTLexicon.global}) {
    switch (varName) {
      case 'PhysicalKeyboardKey':
        return ({positionalArgs, namedArgs, typeArgs}) => PhysicalKeyboardKey(positionalArgs[0], debugName : namedArgs.containsKey('debugName') ? namedArgs['debugName'] : null);
      case 'PhysicalKeyboardKey.findKeyByCode':
        return ({positionalArgs, namedArgs, typeArgs}) => PhysicalKeyboardKey.findKeyByCode(positionalArgs[0]);
      case 'PhysicalKeyboardKey.none':
        return PhysicalKeyboardKey.none;
      case 'PhysicalKeyboardKey.hyper':
        return PhysicalKeyboardKey.hyper;
      case 'PhysicalKeyboardKey.superKey':
        return PhysicalKeyboardKey.superKey;
      case 'PhysicalKeyboardKey.fnLock':
        return PhysicalKeyboardKey.fnLock;
      case 'PhysicalKeyboardKey.suspend':
        return PhysicalKeyboardKey.suspend;
      case 'PhysicalKeyboardKey.resume':
        return PhysicalKeyboardKey.resume;
      case 'PhysicalKeyboardKey.turbo':
        return PhysicalKeyboardKey.turbo;
      case 'PhysicalKeyboardKey.privacyScreenToggle':
        return PhysicalKeyboardKey.privacyScreenToggle;
      case 'PhysicalKeyboardKey.sleep':
        return PhysicalKeyboardKey.sleep;
      case 'PhysicalKeyboardKey.wakeUp':
        return PhysicalKeyboardKey.wakeUp;
      case 'PhysicalKeyboardKey.displayToggleIntExt':
        return PhysicalKeyboardKey.displayToggleIntExt;
      case 'PhysicalKeyboardKey.usbReserved':
        return PhysicalKeyboardKey.usbReserved;
      case 'PhysicalKeyboardKey.usbErrorRollOver':
        return PhysicalKeyboardKey.usbErrorRollOver;
      case 'PhysicalKeyboardKey.usbPostFail':
        return PhysicalKeyboardKey.usbPostFail;
      case 'PhysicalKeyboardKey.usbErrorUndefined':
        return PhysicalKeyboardKey.usbErrorUndefined;
      case 'PhysicalKeyboardKey.keyA':
        return PhysicalKeyboardKey.keyA;
      case 'PhysicalKeyboardKey.keyB':
        return PhysicalKeyboardKey.keyB;
      case 'PhysicalKeyboardKey.keyC':
        return PhysicalKeyboardKey.keyC;
      case 'PhysicalKeyboardKey.keyD':
        return PhysicalKeyboardKey.keyD;
      case 'PhysicalKeyboardKey.keyE':
        return PhysicalKeyboardKey.keyE;
      case 'PhysicalKeyboardKey.keyF':
        return PhysicalKeyboardKey.keyF;
      case 'PhysicalKeyboardKey.keyG':
        return PhysicalKeyboardKey.keyG;
      case 'PhysicalKeyboardKey.keyH':
        return PhysicalKeyboardKey.keyH;
      case 'PhysicalKeyboardKey.keyI':
        return PhysicalKeyboardKey.keyI;
      case 'PhysicalKeyboardKey.keyJ':
        return PhysicalKeyboardKey.keyJ;
      case 'PhysicalKeyboardKey.keyK':
        return PhysicalKeyboardKey.keyK;
      case 'PhysicalKeyboardKey.keyL':
        return PhysicalKeyboardKey.keyL;
      case 'PhysicalKeyboardKey.keyM':
        return PhysicalKeyboardKey.keyM;
      case 'PhysicalKeyboardKey.keyN':
        return PhysicalKeyboardKey.keyN;
      case 'PhysicalKeyboardKey.keyO':
        return PhysicalKeyboardKey.keyO;
      case 'PhysicalKeyboardKey.keyP':
        return PhysicalKeyboardKey.keyP;
      case 'PhysicalKeyboardKey.keyQ':
        return PhysicalKeyboardKey.keyQ;
      case 'PhysicalKeyboardKey.keyR':
        return PhysicalKeyboardKey.keyR;
      case 'PhysicalKeyboardKey.keyS':
        return PhysicalKeyboardKey.keyS;
      case 'PhysicalKeyboardKey.keyT':
        return PhysicalKeyboardKey.keyT;
      case 'PhysicalKeyboardKey.keyU':
        return PhysicalKeyboardKey.keyU;
      case 'PhysicalKeyboardKey.keyV':
        return PhysicalKeyboardKey.keyV;
      case 'PhysicalKeyboardKey.keyW':
        return PhysicalKeyboardKey.keyW;
      case 'PhysicalKeyboardKey.keyX':
        return PhysicalKeyboardKey.keyX;
      case 'PhysicalKeyboardKey.keyY':
        return PhysicalKeyboardKey.keyY;
      case 'PhysicalKeyboardKey.keyZ':
        return PhysicalKeyboardKey.keyZ;
      case 'PhysicalKeyboardKey.digit1':
        return PhysicalKeyboardKey.digit1;
      case 'PhysicalKeyboardKey.digit2':
        return PhysicalKeyboardKey.digit2;
      case 'PhysicalKeyboardKey.digit3':
        return PhysicalKeyboardKey.digit3;
      case 'PhysicalKeyboardKey.digit4':
        return PhysicalKeyboardKey.digit4;
      case 'PhysicalKeyboardKey.digit5':
        return PhysicalKeyboardKey.digit5;
      case 'PhysicalKeyboardKey.digit6':
        return PhysicalKeyboardKey.digit6;
      case 'PhysicalKeyboardKey.digit7':
        return PhysicalKeyboardKey.digit7;
      case 'PhysicalKeyboardKey.digit8':
        return PhysicalKeyboardKey.digit8;
      case 'PhysicalKeyboardKey.digit9':
        return PhysicalKeyboardKey.digit9;
      case 'PhysicalKeyboardKey.digit0':
        return PhysicalKeyboardKey.digit0;
      case 'PhysicalKeyboardKey.enter':
        return PhysicalKeyboardKey.enter;
      case 'PhysicalKeyboardKey.escape':
        return PhysicalKeyboardKey.escape;
      case 'PhysicalKeyboardKey.backspace':
        return PhysicalKeyboardKey.backspace;
      case 'PhysicalKeyboardKey.tab':
        return PhysicalKeyboardKey.tab;
      case 'PhysicalKeyboardKey.space':
        return PhysicalKeyboardKey.space;
      case 'PhysicalKeyboardKey.minus':
        return PhysicalKeyboardKey.minus;
      case 'PhysicalKeyboardKey.equal':
        return PhysicalKeyboardKey.equal;
      case 'PhysicalKeyboardKey.bracketLeft':
        return PhysicalKeyboardKey.bracketLeft;
      case 'PhysicalKeyboardKey.bracketRight':
        return PhysicalKeyboardKey.bracketRight;
      case 'PhysicalKeyboardKey.backslash':
        return PhysicalKeyboardKey.backslash;
      case 'PhysicalKeyboardKey.semicolon':
        return PhysicalKeyboardKey.semicolon;
      case 'PhysicalKeyboardKey.quote':
        return PhysicalKeyboardKey.quote;
      case 'PhysicalKeyboardKey.backquote':
        return PhysicalKeyboardKey.backquote;
      case 'PhysicalKeyboardKey.comma':
        return PhysicalKeyboardKey.comma;
      case 'PhysicalKeyboardKey.period':
        return PhysicalKeyboardKey.period;
      case 'PhysicalKeyboardKey.slash':
        return PhysicalKeyboardKey.slash;
      case 'PhysicalKeyboardKey.capsLock':
        return PhysicalKeyboardKey.capsLock;
      case 'PhysicalKeyboardKey.f1':
        return PhysicalKeyboardKey.f1;
      case 'PhysicalKeyboardKey.f2':
        return PhysicalKeyboardKey.f2;
      case 'PhysicalKeyboardKey.f3':
        return PhysicalKeyboardKey.f3;
      case 'PhysicalKeyboardKey.f4':
        return PhysicalKeyboardKey.f4;
      case 'PhysicalKeyboardKey.f5':
        return PhysicalKeyboardKey.f5;
      case 'PhysicalKeyboardKey.f6':
        return PhysicalKeyboardKey.f6;
      case 'PhysicalKeyboardKey.f7':
        return PhysicalKeyboardKey.f7;
      case 'PhysicalKeyboardKey.f8':
        return PhysicalKeyboardKey.f8;
      case 'PhysicalKeyboardKey.f9':
        return PhysicalKeyboardKey.f9;
      case 'PhysicalKeyboardKey.f10':
        return PhysicalKeyboardKey.f10;
      case 'PhysicalKeyboardKey.f11':
        return PhysicalKeyboardKey.f11;
      case 'PhysicalKeyboardKey.f12':
        return PhysicalKeyboardKey.f12;
      case 'PhysicalKeyboardKey.printScreen':
        return PhysicalKeyboardKey.printScreen;
      case 'PhysicalKeyboardKey.scrollLock':
        return PhysicalKeyboardKey.scrollLock;
      case 'PhysicalKeyboardKey.pause':
        return PhysicalKeyboardKey.pause;
      case 'PhysicalKeyboardKey.insert':
        return PhysicalKeyboardKey.insert;
      case 'PhysicalKeyboardKey.home':
        return PhysicalKeyboardKey.home;
      case 'PhysicalKeyboardKey.pageUp':
        return PhysicalKeyboardKey.pageUp;
      case 'PhysicalKeyboardKey.delete':
        return PhysicalKeyboardKey.delete;
      case 'PhysicalKeyboardKey.end':
        return PhysicalKeyboardKey.end;
      case 'PhysicalKeyboardKey.pageDown':
        return PhysicalKeyboardKey.pageDown;
      case 'PhysicalKeyboardKey.arrowRight':
        return PhysicalKeyboardKey.arrowRight;
      case 'PhysicalKeyboardKey.arrowLeft':
        return PhysicalKeyboardKey.arrowLeft;
      case 'PhysicalKeyboardKey.arrowDown':
        return PhysicalKeyboardKey.arrowDown;
      case 'PhysicalKeyboardKey.arrowUp':
        return PhysicalKeyboardKey.arrowUp;
      case 'PhysicalKeyboardKey.numLock':
        return PhysicalKeyboardKey.numLock;
      case 'PhysicalKeyboardKey.numpadDivide':
        return PhysicalKeyboardKey.numpadDivide;
      case 'PhysicalKeyboardKey.numpadMultiply':
        return PhysicalKeyboardKey.numpadMultiply;
      case 'PhysicalKeyboardKey.numpadSubtract':
        return PhysicalKeyboardKey.numpadSubtract;
      case 'PhysicalKeyboardKey.numpadAdd':
        return PhysicalKeyboardKey.numpadAdd;
      case 'PhysicalKeyboardKey.numpadEnter':
        return PhysicalKeyboardKey.numpadEnter;
      case 'PhysicalKeyboardKey.numpad1':
        return PhysicalKeyboardKey.numpad1;
      case 'PhysicalKeyboardKey.numpad2':
        return PhysicalKeyboardKey.numpad2;
      case 'PhysicalKeyboardKey.numpad3':
        return PhysicalKeyboardKey.numpad3;
      case 'PhysicalKeyboardKey.numpad4':
        return PhysicalKeyboardKey.numpad4;
      case 'PhysicalKeyboardKey.numpad5':
        return PhysicalKeyboardKey.numpad5;
      case 'PhysicalKeyboardKey.numpad6':
        return PhysicalKeyboardKey.numpad6;
      case 'PhysicalKeyboardKey.numpad7':
        return PhysicalKeyboardKey.numpad7;
      case 'PhysicalKeyboardKey.numpad8':
        return PhysicalKeyboardKey.numpad8;
      case 'PhysicalKeyboardKey.numpad9':
        return PhysicalKeyboardKey.numpad9;
      case 'PhysicalKeyboardKey.numpad0':
        return PhysicalKeyboardKey.numpad0;
      case 'PhysicalKeyboardKey.numpadDecimal':
        return PhysicalKeyboardKey.numpadDecimal;
      case 'PhysicalKeyboardKey.intlBackslash':
        return PhysicalKeyboardKey.intlBackslash;
      case 'PhysicalKeyboardKey.contextMenu':
        return PhysicalKeyboardKey.contextMenu;
      case 'PhysicalKeyboardKey.power':
        return PhysicalKeyboardKey.power;
      case 'PhysicalKeyboardKey.numpadEqual':
        return PhysicalKeyboardKey.numpadEqual;
      case 'PhysicalKeyboardKey.f13':
        return PhysicalKeyboardKey.f13;
      case 'PhysicalKeyboardKey.f14':
        return PhysicalKeyboardKey.f14;
      case 'PhysicalKeyboardKey.f15':
        return PhysicalKeyboardKey.f15;
      case 'PhysicalKeyboardKey.f16':
        return PhysicalKeyboardKey.f16;
      case 'PhysicalKeyboardKey.f17':
        return PhysicalKeyboardKey.f17;
      case 'PhysicalKeyboardKey.f18':
        return PhysicalKeyboardKey.f18;
      case 'PhysicalKeyboardKey.f19':
        return PhysicalKeyboardKey.f19;
      case 'PhysicalKeyboardKey.f20':
        return PhysicalKeyboardKey.f20;
      case 'PhysicalKeyboardKey.f21':
        return PhysicalKeyboardKey.f21;
      case 'PhysicalKeyboardKey.f22':
        return PhysicalKeyboardKey.f22;
      case 'PhysicalKeyboardKey.f23':
        return PhysicalKeyboardKey.f23;
      case 'PhysicalKeyboardKey.f24':
        return PhysicalKeyboardKey.f24;
      case 'PhysicalKeyboardKey.open':
        return PhysicalKeyboardKey.open;
      case 'PhysicalKeyboardKey.help':
        return PhysicalKeyboardKey.help;
      case 'PhysicalKeyboardKey.select':
        return PhysicalKeyboardKey.select;
      case 'PhysicalKeyboardKey.again':
        return PhysicalKeyboardKey.again;
      case 'PhysicalKeyboardKey.undo':
        return PhysicalKeyboardKey.undo;
      case 'PhysicalKeyboardKey.cut':
        return PhysicalKeyboardKey.cut;
      case 'PhysicalKeyboardKey.copy':
        return PhysicalKeyboardKey.copy;
      case 'PhysicalKeyboardKey.paste':
        return PhysicalKeyboardKey.paste;
      case 'PhysicalKeyboardKey.find':
        return PhysicalKeyboardKey.find;
      case 'PhysicalKeyboardKey.audioVolumeMute':
        return PhysicalKeyboardKey.audioVolumeMute;
      case 'PhysicalKeyboardKey.audioVolumeUp':
        return PhysicalKeyboardKey.audioVolumeUp;
      case 'PhysicalKeyboardKey.audioVolumeDown':
        return PhysicalKeyboardKey.audioVolumeDown;
      case 'PhysicalKeyboardKey.numpadComma':
        return PhysicalKeyboardKey.numpadComma;
      case 'PhysicalKeyboardKey.intlRo':
        return PhysicalKeyboardKey.intlRo;
      case 'PhysicalKeyboardKey.kanaMode':
        return PhysicalKeyboardKey.kanaMode;
      case 'PhysicalKeyboardKey.intlYen':
        return PhysicalKeyboardKey.intlYen;
      case 'PhysicalKeyboardKey.convert':
        return PhysicalKeyboardKey.convert;
      case 'PhysicalKeyboardKey.nonConvert':
        return PhysicalKeyboardKey.nonConvert;
      case 'PhysicalKeyboardKey.lang1':
        return PhysicalKeyboardKey.lang1;
      case 'PhysicalKeyboardKey.lang2':
        return PhysicalKeyboardKey.lang2;
      case 'PhysicalKeyboardKey.lang3':
        return PhysicalKeyboardKey.lang3;
      case 'PhysicalKeyboardKey.lang4':
        return PhysicalKeyboardKey.lang4;
      case 'PhysicalKeyboardKey.lang5':
        return PhysicalKeyboardKey.lang5;
      case 'PhysicalKeyboardKey.abort':
        return PhysicalKeyboardKey.abort;
      case 'PhysicalKeyboardKey.props':
        return PhysicalKeyboardKey.props;
      case 'PhysicalKeyboardKey.numpadParenLeft':
        return PhysicalKeyboardKey.numpadParenLeft;
      case 'PhysicalKeyboardKey.numpadParenRight':
        return PhysicalKeyboardKey.numpadParenRight;
      case 'PhysicalKeyboardKey.numpadBackspace':
        return PhysicalKeyboardKey.numpadBackspace;
      case 'PhysicalKeyboardKey.numpadMemoryStore':
        return PhysicalKeyboardKey.numpadMemoryStore;
      case 'PhysicalKeyboardKey.numpadMemoryRecall':
        return PhysicalKeyboardKey.numpadMemoryRecall;
      case 'PhysicalKeyboardKey.numpadMemoryClear':
        return PhysicalKeyboardKey.numpadMemoryClear;
      case 'PhysicalKeyboardKey.numpadMemoryAdd':
        return PhysicalKeyboardKey.numpadMemoryAdd;
      case 'PhysicalKeyboardKey.numpadMemorySubtract':
        return PhysicalKeyboardKey.numpadMemorySubtract;
      case 'PhysicalKeyboardKey.numpadSignChange':
        return PhysicalKeyboardKey.numpadSignChange;
      case 'PhysicalKeyboardKey.numpadClear':
        return PhysicalKeyboardKey.numpadClear;
      case 'PhysicalKeyboardKey.numpadClearEntry':
        return PhysicalKeyboardKey.numpadClearEntry;
      case 'PhysicalKeyboardKey.controlLeft':
        return PhysicalKeyboardKey.controlLeft;
      case 'PhysicalKeyboardKey.shiftLeft':
        return PhysicalKeyboardKey.shiftLeft;
      case 'PhysicalKeyboardKey.altLeft':
        return PhysicalKeyboardKey.altLeft;
      case 'PhysicalKeyboardKey.metaLeft':
        return PhysicalKeyboardKey.metaLeft;
      case 'PhysicalKeyboardKey.controlRight':
        return PhysicalKeyboardKey.controlRight;
      case 'PhysicalKeyboardKey.shiftRight':
        return PhysicalKeyboardKey.shiftRight;
      case 'PhysicalKeyboardKey.altRight':
        return PhysicalKeyboardKey.altRight;
      case 'PhysicalKeyboardKey.metaRight':
        return PhysicalKeyboardKey.metaRight;
      case 'PhysicalKeyboardKey.info':
        return PhysicalKeyboardKey.info;
      case 'PhysicalKeyboardKey.closedCaptionToggle':
        return PhysicalKeyboardKey.closedCaptionToggle;
      case 'PhysicalKeyboardKey.brightnessUp':
        return PhysicalKeyboardKey.brightnessUp;
      case 'PhysicalKeyboardKey.brightnessDown':
        return PhysicalKeyboardKey.brightnessDown;
      case 'PhysicalKeyboardKey.brightnessToggle':
        return PhysicalKeyboardKey.brightnessToggle;
      case 'PhysicalKeyboardKey.brightnessMinimum':
        return PhysicalKeyboardKey.brightnessMinimum;
      case 'PhysicalKeyboardKey.brightnessMaximum':
        return PhysicalKeyboardKey.brightnessMaximum;
      case 'PhysicalKeyboardKey.brightnessAuto':
        return PhysicalKeyboardKey.brightnessAuto;
      case 'PhysicalKeyboardKey.kbdIllumUp':
        return PhysicalKeyboardKey.kbdIllumUp;
      case 'PhysicalKeyboardKey.kbdIllumDown':
        return PhysicalKeyboardKey.kbdIllumDown;
      case 'PhysicalKeyboardKey.mediaLast':
        return PhysicalKeyboardKey.mediaLast;
      case 'PhysicalKeyboardKey.launchPhone':
        return PhysicalKeyboardKey.launchPhone;
      case 'PhysicalKeyboardKey.programGuide':
        return PhysicalKeyboardKey.programGuide;
      case 'PhysicalKeyboardKey.exit':
        return PhysicalKeyboardKey.exit;
      case 'PhysicalKeyboardKey.channelUp':
        return PhysicalKeyboardKey.channelUp;
      case 'PhysicalKeyboardKey.channelDown':
        return PhysicalKeyboardKey.channelDown;
      case 'PhysicalKeyboardKey.mediaPlay':
        return PhysicalKeyboardKey.mediaPlay;
      case 'PhysicalKeyboardKey.mediaPause':
        return PhysicalKeyboardKey.mediaPause;
      case 'PhysicalKeyboardKey.mediaRecord':
        return PhysicalKeyboardKey.mediaRecord;
      case 'PhysicalKeyboardKey.mediaFastForward':
        return PhysicalKeyboardKey.mediaFastForward;
      case 'PhysicalKeyboardKey.mediaRewind':
        return PhysicalKeyboardKey.mediaRewind;
      case 'PhysicalKeyboardKey.mediaTrackNext':
        return PhysicalKeyboardKey.mediaTrackNext;
      case 'PhysicalKeyboardKey.mediaTrackPrevious':
        return PhysicalKeyboardKey.mediaTrackPrevious;
      case 'PhysicalKeyboardKey.mediaStop':
        return PhysicalKeyboardKey.mediaStop;
      case 'PhysicalKeyboardKey.eject':
        return PhysicalKeyboardKey.eject;
      case 'PhysicalKeyboardKey.mediaPlayPause':
        return PhysicalKeyboardKey.mediaPlayPause;
      case 'PhysicalKeyboardKey.speechInputToggle':
        return PhysicalKeyboardKey.speechInputToggle;
      case 'PhysicalKeyboardKey.bassBoost':
        return PhysicalKeyboardKey.bassBoost;
      case 'PhysicalKeyboardKey.mediaSelect':
        return PhysicalKeyboardKey.mediaSelect;
      case 'PhysicalKeyboardKey.launchWordProcessor':
        return PhysicalKeyboardKey.launchWordProcessor;
      case 'PhysicalKeyboardKey.launchSpreadsheet':
        return PhysicalKeyboardKey.launchSpreadsheet;
      case 'PhysicalKeyboardKey.launchMail':
        return PhysicalKeyboardKey.launchMail;
      case 'PhysicalKeyboardKey.launchContacts':
        return PhysicalKeyboardKey.launchContacts;
      case 'PhysicalKeyboardKey.launchCalendar':
        return PhysicalKeyboardKey.launchCalendar;
      case 'PhysicalKeyboardKey.launchApp2':
        return PhysicalKeyboardKey.launchApp2;
      case 'PhysicalKeyboardKey.launchApp1':
        return PhysicalKeyboardKey.launchApp1;
      case 'PhysicalKeyboardKey.launchInternetBrowser':
        return PhysicalKeyboardKey.launchInternetBrowser;
      case 'PhysicalKeyboardKey.logOff':
        return PhysicalKeyboardKey.logOff;
      case 'PhysicalKeyboardKey.lockScreen':
        return PhysicalKeyboardKey.lockScreen;
      case 'PhysicalKeyboardKey.launchControlPanel':
        return PhysicalKeyboardKey.launchControlPanel;
      case 'PhysicalKeyboardKey.selectTask':
        return PhysicalKeyboardKey.selectTask;
      case 'PhysicalKeyboardKey.launchDocuments':
        return PhysicalKeyboardKey.launchDocuments;
      case 'PhysicalKeyboardKey.spellCheck':
        return PhysicalKeyboardKey.spellCheck;
      case 'PhysicalKeyboardKey.launchKeyboardLayout':
        return PhysicalKeyboardKey.launchKeyboardLayout;
      case 'PhysicalKeyboardKey.launchScreenSaver':
        return PhysicalKeyboardKey.launchScreenSaver;
      case 'PhysicalKeyboardKey.launchAssistant':
        return PhysicalKeyboardKey.launchAssistant;
      case 'PhysicalKeyboardKey.launchAudioBrowser':
        return PhysicalKeyboardKey.launchAudioBrowser;
      case 'PhysicalKeyboardKey.newKey':
        return PhysicalKeyboardKey.newKey;
      case 'PhysicalKeyboardKey.close':
        return PhysicalKeyboardKey.close;
      case 'PhysicalKeyboardKey.save':
        return PhysicalKeyboardKey.save;
      case 'PhysicalKeyboardKey.print':
        return PhysicalKeyboardKey.print;
      case 'PhysicalKeyboardKey.browserSearch':
        return PhysicalKeyboardKey.browserSearch;
      case 'PhysicalKeyboardKey.browserHome':
        return PhysicalKeyboardKey.browserHome;
      case 'PhysicalKeyboardKey.browserBack':
        return PhysicalKeyboardKey.browserBack;
      case 'PhysicalKeyboardKey.browserForward':
        return PhysicalKeyboardKey.browserForward;
      case 'PhysicalKeyboardKey.browserStop':
        return PhysicalKeyboardKey.browserStop;
      case 'PhysicalKeyboardKey.browserRefresh':
        return PhysicalKeyboardKey.browserRefresh;
      case 'PhysicalKeyboardKey.browserFavorites':
        return PhysicalKeyboardKey.browserFavorites;
      case 'PhysicalKeyboardKey.zoomIn':
        return PhysicalKeyboardKey.zoomIn;
      case 'PhysicalKeyboardKey.zoomOut':
        return PhysicalKeyboardKey.zoomOut;
      case 'PhysicalKeyboardKey.zoomToggle':
        return PhysicalKeyboardKey.zoomToggle;
      case 'PhysicalKeyboardKey.redo':
        return PhysicalKeyboardKey.redo;
      case 'PhysicalKeyboardKey.mailReply':
        return PhysicalKeyboardKey.mailReply;
      case 'PhysicalKeyboardKey.mailForward':
        return PhysicalKeyboardKey.mailForward;
      case 'PhysicalKeyboardKey.mailSend':
        return PhysicalKeyboardKey.mailSend;
      case 'PhysicalKeyboardKey.keyboardLayoutSelect':
        return PhysicalKeyboardKey.keyboardLayoutSelect;
      case 'PhysicalKeyboardKey.showAllWindows':
        return PhysicalKeyboardKey.showAllWindows;
      case 'PhysicalKeyboardKey.gameButton1':
        return PhysicalKeyboardKey.gameButton1;
      case 'PhysicalKeyboardKey.gameButton2':
        return PhysicalKeyboardKey.gameButton2;
      case 'PhysicalKeyboardKey.gameButton3':
        return PhysicalKeyboardKey.gameButton3;
      case 'PhysicalKeyboardKey.gameButton4':
        return PhysicalKeyboardKey.gameButton4;
      case 'PhysicalKeyboardKey.gameButton5':
        return PhysicalKeyboardKey.gameButton5;
      case 'PhysicalKeyboardKey.gameButton6':
        return PhysicalKeyboardKey.gameButton6;
      case 'PhysicalKeyboardKey.gameButton7':
        return PhysicalKeyboardKey.gameButton7;
      case 'PhysicalKeyboardKey.gameButton8':
        return PhysicalKeyboardKey.gameButton8;
      case 'PhysicalKeyboardKey.gameButton9':
        return PhysicalKeyboardKey.gameButton9;
      case 'PhysicalKeyboardKey.gameButton10':
        return PhysicalKeyboardKey.gameButton10;
      case 'PhysicalKeyboardKey.gameButton11':
        return PhysicalKeyboardKey.gameButton11;
      case 'PhysicalKeyboardKey.gameButton12':
        return PhysicalKeyboardKey.gameButton12;
      case 'PhysicalKeyboardKey.gameButton13':
        return PhysicalKeyboardKey.gameButton13;
      case 'PhysicalKeyboardKey.gameButton14':
        return PhysicalKeyboardKey.gameButton14;
      case 'PhysicalKeyboardKey.gameButton15':
        return PhysicalKeyboardKey.gameButton15;
      case 'PhysicalKeyboardKey.gameButton16':
        return PhysicalKeyboardKey.gameButton16;
      case 'PhysicalKeyboardKey.gameButtonA':
        return PhysicalKeyboardKey.gameButtonA;
      case 'PhysicalKeyboardKey.gameButtonB':
        return PhysicalKeyboardKey.gameButtonB;
      case 'PhysicalKeyboardKey.gameButtonC':
        return PhysicalKeyboardKey.gameButtonC;
      case 'PhysicalKeyboardKey.gameButtonLeft1':
        return PhysicalKeyboardKey.gameButtonLeft1;
      case 'PhysicalKeyboardKey.gameButtonLeft2':
        return PhysicalKeyboardKey.gameButtonLeft2;
      case 'PhysicalKeyboardKey.gameButtonMode':
        return PhysicalKeyboardKey.gameButtonMode;
      case 'PhysicalKeyboardKey.gameButtonRight1':
        return PhysicalKeyboardKey.gameButtonRight1;
      case 'PhysicalKeyboardKey.gameButtonRight2':
        return PhysicalKeyboardKey.gameButtonRight2;
      case 'PhysicalKeyboardKey.gameButtonSelect':
        return PhysicalKeyboardKey.gameButtonSelect;
      case 'PhysicalKeyboardKey.gameButtonStart':
        return PhysicalKeyboardKey.gameButtonStart;
      case 'PhysicalKeyboardKey.gameButtonThumbLeft':
        return PhysicalKeyboardKey.gameButtonThumbLeft;
      case 'PhysicalKeyboardKey.gameButtonThumbRight':
        return PhysicalKeyboardKey.gameButtonThumbRight;
      case 'PhysicalKeyboardKey.gameButtonX':
        return PhysicalKeyboardKey.gameButtonX;
      case 'PhysicalKeyboardKey.gameButtonY':
        return PhysicalKeyboardKey.gameButtonY;
      case 'PhysicalKeyboardKey.gameButtonZ':
        return PhysicalKeyboardKey.gameButtonZ;
      case 'PhysicalKeyboardKey.fn':
        return PhysicalKeyboardKey.fn;
      default:
        throw HTErrorUndefined(varName);
    }
  }

  @override
  dynamic instanceMemberGet(dynamic instance, String id) {
    return (instance as PhysicalKeyboardKey).htFetch(id);
  }



}

extension PhysicalKeyboardKeyBinding on PhysicalKeyboardKey {
  dynamic htFetch(String varName) {
    switch (varName) {
      case 'typeid':
        return HTTypeId('PhysicalKeyboardKey');
      case 'usbHidUsage':
        return usbHidUsage;
      case 'debugName':
        return debugName;
      case 'hashCode':
        return hashCode;
      case 'debugFillProperties':
        return ({positionalArgs, namedArgs, typeArgs}) => this.debugFillProperties(positionalArgs[0]);
      default:
        throw HTErrorUndefined(varName);
    }
  }

}

