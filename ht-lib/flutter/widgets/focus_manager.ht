external class KeyEventResult {
    static const handled
    static const ignored
    static const skipRemainingHandlers
}
external class UnfocusDisposition {
    static const scope
    static const previouslyFocusedChild
}
external class FocusHighlightMode {
    static const touch
    static const traditional
}
external class FocusHighlightStrategy {
    static const automatic
    static const alwaysTouch
    static const alwaysTraditional
}
external class FocusNode {
    construct 
    get skipTraversal
    set skipTraversal(value)
    get canRequestFocus
    set canRequestFocus(value)
    get descendantsAreFocusable
    set descendantsAreFocusable(value)
    get context
    get onKey
    get parent
    get children
    get traversalChildren
    get debugLabel
    set debugLabel(value)
    get descendants
    get traversalDescendants
    get ancestors
    get hasFocus
    get hasPrimaryFocus
    get highlightMode
    get nearestScope
    get enclosingScope
    get size
    get offset
    get rect
    fun unfocus
    fun consumeKeyboardToken
    fun attach
    fun dispose
    fun requestFocus
    fun nextFocus
    fun previousFocus
    fun focusInDirection
    fun debugFillProperties
    fun debugDescribeChildren
    fun toStringShort
}
external class FocusScopeNode {
    construct 
    get nearestScope
    get isFirstFocus
    get focusedChild
    fun setFirstFocus
    fun autofocus
    fun debugFillProperties
    get skipTraversal
    get canRequestFocus
    get descendantsAreFocusable
    get context
    get onKey
    get parent
    get children
    get traversalChildren
    get debugLabel
    get descendants
    get traversalDescendants
    get ancestors
    get hasFocus
    get hasPrimaryFocus
    get highlightMode
    get enclosingScope
    get size
    get offset
    get rect
    fun unfocus
    fun consumeKeyboardToken
    fun attach
    fun dispose
    fun requestFocus
    fun nextFocus
    fun previousFocus
    fun focusInDirection
    fun debugDescribeChildren
    fun toStringShort
}
external class FocusManager {
    construct 
    get rootScope
    get highlightStrategy
    set highlightStrategy(value)
    get highlightMode
    fun addHighlightModeListener
    fun removeHighlightModeListener
    get primaryFocus
    fun debugDescribeChildren
    fun debugFillProperties
    static get instance
}
